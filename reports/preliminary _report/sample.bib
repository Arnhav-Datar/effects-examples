@article{DBLP:journals/corr/Perov16a,
  author    = {Yura N. Perov},
  title     = {Applications of Probabilistic Programming (Master's thesis, 2015)},
  journal   = {CoRR},
  volume    = {abs/1606.00075},
  year      = {2016},
  url       = {http://arxiv.org/abs/1606.00075},
  archivePrefix = {arXiv},
  eprint    = {1606.00075},
  timestamp = {Mon, 13 Aug 2018 16:47:05 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/Perov16a.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{effects,
author = {Pretnar, Matija},
year = {2015},
month = {12},
pages = {19-35},
title = {An Introduction to Algebraic Effects and Handlers. Invited tutorial paper},
volume = {319},
journal = {Electronic Notes in Theoretical Computer Science},
doi = {10.1016/j.entcs.2015.12.003}
}

@inproceedings{appl,
author = {Gordon, Andrew D. and Henzinger, Thomas A. and Nori, Aditya V. and Rajamani, Sriram K.},
title = {Probabilistic Programming},
year = {2014},
isbn = {9781450328654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593882.2593900},
doi = {10.1145/2593882.2593900},
abstract = { Probabilistic programs are usual functional or imperative programs with two added constructs: (1) the ability to draw values at random from distributions, and (2) the ability to condition values of variables in a program via observations. Models from diverse application areas such as computer vision, coding theory, cryptographic protocols, biology and reliability analysis can be written as probabilistic programs.  Probabilistic inference is the problem of computing an explicit representation of the probability distribution implicitly specified by a probabilistic program. Depending on the application, the desired output from inference may vary---we may want to estimate the expected value of some function f with respect to the distribution, or the mode of the distribution, or simply a set of samples drawn from the distribution.  In this paper, we describe connections this research area called ``Probabilistic Programming" has with programming languages and software engineering, and this includes language design, and the static and dynamic analysis of programs. We survey current state of the art and speculate on promising directions for future research. },
booktitle = {Future of Software Engineering Proceedings},
pages = {167–181},
numpages = {15},
keywords = {Probabilistic programming, Machine learning, Program analysis},
location = {Hyderabad, India},
series = {FOSE 2014}
}

 @misc{ocaml-multicore, title={ocaml-multicore/effects-examples}, url={https://github.com/ocaml-multicore/effects-examples}, journal={GitHub}, author={Ocaml-Multicore}} 
 
 @inproceedings{hack,
author = {Ai, Jessica and Arora, Nimar S. and Dong, ﻿Ning and Gokkaya, ﻿Beliz and Jiang, Thomas and Kubendran, ﻿Anitha and Kumar, ﻿Arun and Tingley, Michael and Torabi, ﻿Narjes},
title = {HackPPL: A Universal Probabilistic Programming Language},
year = {2019},
isbn = {9781450367196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3315508.3329974},
doi = {10.1145/3315508.3329974},
abstract = {HackPPL is a probabilistic programming language (PPL) built within the Hack programming language. Its universal inference engine allows developers to perform inference across a diverse set of models expressible in arbitrary Hack code. Through language-level extensions and direct integration with developer tools, HackPPL aims to bridge the gap between domain-specific and embedded PPLs. This paper overviews the design and implementation choices for the HackPPL toolchain and presents findings by applying it to a representative problem faced by social media companies.},
booktitle = {Proceedings of the 3rd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages},
pages = {20–28},
numpages = {9},
keywords = {Variational methods, Bayesian Inference, Crowdsourcing, Probabilistic Programming, Markov-chain Monte Carlo methods, Social Networks, Coroutines, Probabilistic Representations, Hack},
location = {Phoenix, AZ, USA},
series = {MAPL 2019}
}

@misc{pyro,
      title={Pyro: Deep Universal Probabilistic Programming}, 
      author={Eli Bingham and Jonathan P. Chen and Martin Jankowiak and Fritz Obermeyer and Neeraj Pradhan and Theofanis Karaletsos and Rohit Singh and Paul Szerlip and Paul Horsfall and Noah D. Goodman},
      year={2018},
      eprint={1810.09538},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}

@article{Baydin_2019,
   title={Etalumis},
   ISBN={9781450362290},
   url={http://dx.doi.org/10.1145/3295500.3356180},
   DOI={10.1145/3295500.3356180},
   journal={Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
   publisher={ACM},
   author={Baydin, Atilim Güneş and Shao, Lei and Bhimji, Wahid and Heinrich, Lukas and Meadows, Lawrence and Liu, Jialin and Munk, Andreas and Naderiparizi, Saeid and Gram-Hansen, Bradley and Louppe, Gilles and et al.},
   year={2019},
   month={11}
}
@misc{vandemeent2018introduction,
      title={An Introduction to Probabilistic Programming}, 
      author={Jan-Willem van de Meent and Brooks Paige and Hongseok Yang and Frank Wood},
      year={2018},
      eprint={1809.10756},
      archivePrefix={arXiv},
      primaryClass={stat.ML}
}
@article{IBAL,
author = {Pfeffer, Avi},
year = {2000},
month = {01},
pages = {},
title = {The Design and Implementation of IBAL: A General-Purpose Probabilistic Language},
journal = {Applied Sciences}
}
@inproceedings{Hansei,
author = {Kiselyov, Oleg and Shan, Chung-Chieh},
title = {Embedded Probabilistic Programming},
year = {2009},
isbn = {9783642030338},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-03034-5_17},
doi = {10.1007/978-3-642-03034-5_17},
abstract = {Two general techniques for implementing a domain-specific language (DSL) with less overhead are the <em>finally-tagless</em> embedding of object programs and the <em>direct-style</em> representation of side effects. We use these techniques to build a DSL for <em>probabilistic programming</em> , for expressing countable probabilistic models and performing exact inference and importance sampling on them. Our language is embedded as an ordinary OCaml library and represents probability distributions as ordinary OCaml programs. We use delimited continuations to reify probabilistic programs as lazy search trees, which inference algorithms may traverse without imposing any interpretive overhead on deterministic parts of a model. We thus take advantage of the existing OCaml implementation to achieve competitive performance and ease of use. Inference algorithms can easily be embedded in probabilistic programs themselves.},
booktitle = {Proceedings of the IFIP TC 2 Working Conference on Domain-Specific Languages},
pages = {360–384},
numpages = {25},
location = {Oxford, UK},
series = {DSL '09}
}

@article{roy2020probabilistic,
  title={A probabilistic programming language in OCaml},
  author={Roy, Anik},
  year={2020}
}
@misc{wang2018owl,
      title={Owl: A General-Purpose Numerical Library in OCaml}, 
      author={Liang Wang},
      year={2018},
      eprint={1707.09616},
      archivePrefix={arXiv},
      primaryClass={cs.MS}
}
@inproceedings{tran2017deep,
  author = {Dustin Tran and Matthew D. Hoffman and Rif A. Saurous and Eugene Brevdo and Kevin Murphy and David M. Blei},
  title = {Deep probabilistic programming},
  booktitle = {International Conference on Learning Representations},
  year = {2017}
}
@misc{collins2020probabilistic,
      title={Probabilistic Programming with CuPPL}, 
      author={Alexander Collins and Vinod Grover},
      year={2020},
      eprint={2010.08454},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}
@article{stan,
author = {Carpenter, Bob and Gelman, Andrew and Hoffman, Matthew and Lee, Daniel and Goodrich, Ben and Betancourt, Michael and Brubaker, Marcus and Guo, Jiqiang and Li, Peter and Riddell, Allen},
year = {2017},
month = {01},
pages = {},
title = {Stan : A Probabilistic Programming Language},
volume = {76},
journal = {Journal of Statistical Software},
doi = {10.18637/jss.v076.i01}
}

@misc{zhou2019lfppl,
      title={LF-PPL: A Low-Level First Order Probabilistic Programming Language for Non-Differentiable Models}, 
      author={Yuan Zhou and Bradley J. Gram-Hansen and Tobias Kohn and Tom Rainforth and Hongseok Yang and Frank Wood},
      year={2019},
      eprint={1903.02482},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}

@misc{hoffman2011nouturn,
      title={The No-U-Turn Sampler: Adaptively Setting Path Lengths in Hamiltonian Monte Carlo}, 
      author={Matthew D. Hoffman and Andrew Gelman},
      year={2011},
      eprint={1111.4246},
      archivePrefix={arXiv},
      primaryClass={stat.CO}
}
@misc{betancourt2018conceptual,
      title={A Conceptual Introduction to Hamiltonian Monte Carlo}, 
      author={Michael Betancourt},
      year={2018},
      eprint={1701.02434},
      archivePrefix={arXiv},
      primaryClass={stat.ME}
}